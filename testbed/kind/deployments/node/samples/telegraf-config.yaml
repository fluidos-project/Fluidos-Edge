apiVersion: v1

kind: ConfigMap
metadata:
  name: telegraf-config
data:
  telegraf.conf: |+
    # Telegraf Configuration
    #
    # Telegraf is entirely plugin driven. All metrics are gathered from the
    # declared inputs, and sent to the declared outputs.
    #
    # Plugins must be declared in here to be active.
    # To deactivate a plugin, comment out the name and any variables.
    #
    # Use 'telegraf -config telegraf.conf -test' to see what metrics a config
    # file would generate.
    #
    # Environment variables can be used anywhere in this config file, simply prepend
    # them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
    # for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


    # Global tags can be specified here in key="value" format.
    [global_tags]

    # Configuration for telegraf agent
    [agent]
      ## Default data collection interval for all inputs
      interval = "1s"
      ## Rounds collection interval to 'interval'
      ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
      round_interval = true

      ## Telegraf will send metrics to outputs in batches of at most
      ## metric_batch_size metrics.
      ## This controls the size of writes that Telegraf sends to output plugins.
      metric_batch_size = 1000

      ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
      ## output, and will flush this buffer on a successful write. Oldest metrics
      ## are dropped first when this buffer fills.
      ## This buffer only fills when writes fail to output plugin(s).
      metric_buffer_limit = 10000

      ## Collection jitter is used to jitter the collection by a random amount.
      ## Each plugin will sleep for a random time within jitter before collecting.
      ## This can be used to avoid many plugins querying things like sysfs at the
      ## same time, which can have a measurable effect on the system.
      collection_jitter = "0s"

      ## Default flushing interval for all outputs. Maximum flush_interval will be
      ## flush_interval + flush_jitter
      flush_interval = "1s"
      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "0s"

      ## By default or when set to "0s", precision will be set to the same
      ## timestamp order as the collection interval, with the maximum being 1s.
      ##   ie, when interval = "10s", precision will be "1s"
      ##       when interval = "250ms", precision will be "1ms"
      ## Precision will NOT be used for service inputs. It is up to each individual
      ## service input to set the timestamp at the appropriate precision.
      ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
      precision = ""

      ## Logging configuration:
      ## Run telegraf with debug log messages.
      debug = false
      ## Run telegraf in quiet mode (error log messages only).
      quiet = false
      ## Specify the log file name. The empty string means to log to stderr.
      logfile = ""

      ## Override default hostname, if empty use os.Hostname()
      hostname = ""
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = true


    ###############################################################################
    #                            OUTPUT PLUGINS                                   #
    ###############################################################################

    # Configuration for sending metrics to InfluxDB
    [[outputs.influxdb_v2]]
      ## The full HTTP or UDP URL for your InfluxDB instance.
      ##
      ## Multiple URLs can be specified for a single cluster, only ONE of the
      ## urls will be written to each interval.
      # urls = ["unix:///var/run/influxdb.sock"]
      # urls = ["udp://127.0.0.1:8089"]
      # urls = ["http://127.0.0.1:8086"]
      urls = ["$INFLUXDB_URL"]

      ## Timeout for HTTP messages.
      # timeout = "5s"

      ## Token for authentication.
      token = "$INFLUXDB_TOKEN"
      #token = "fluidos-edge-demo-token"

      ## UDP payload size is the maximum packet size to send.
      # udp_payload = 512

      ## Optional TLS Config for use on HTTP connections.
      # tls_ca = "/etc/telegraf/ca.pem"
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
      ## Use TLS but skip chain & host verification
      insecure_skip_verify = true

      ## Organization is the name of the organization you wish to write to; must exist.
      organization = "$INFLUXDB_ORG"

      ## Destination bucket to write into.
      bucket = "$INFLUXDB_BUCKET"

    ###############################################################################
    #                            INPUT PLUGINS                                    #
    ###############################################################################

    # Generic HTTP write listener
    [[inputs.http_listener_v2]]
      ## Address and port to host HTTP listener on
      service_address = ":4488"

      ## Paths to listen to.
      # paths = ["/telegraf"]
    
      ## Save path as http_listener_v2_path tag if set to true
      # path_tag = false
    
      ## HTTP methods to accept.
      # methods = ["POST", "PUT"]
      methods = ["POST"]
    
      ## Optional HTTP headers
      ## These headers are applied to the server that is listening for HTTP
      ## requests and included in responses.
      # http_headers = {"HTTP_HEADER" = "TAG_NAME"}
    
      ## maximum duration before timing out read of the request
      # read_timeout = "10s"
      ## maximum duration before timing out write of the response
      # write_timeout = "10s"
    
      ## Maximum allowed http request body size in bytes.
      ## 0 means to use the default of 524,288,000 bytes (500 mebibytes)
      # max_body_size = "500MB"
    
      ## Part of the request to consume.  Available options are "body" and
      ## "query".
      # data_source = "body"
    
      ## Set one or more allowed client CA certificate file names to
      ## enable mutually authenticated TLS connections
      # tls_allowed_cacerts = ["/etc/telegraf/clientca.pem"]
    
      ## Add service certificate and key
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
    
      ## Minimal TLS version accepted by the server
      # tls_min_version = "TLS12"
    
      ## Optional username and password to accept for HTTP basic authentication.
      ## You probably want to make sure you have TLS configured above for this.
      # basic_username = "foobar"
      # basic_password = "barfoo"
    
      ## Optional setting to map http headers into tags
      ## If the http header is not present on the request, no corresponding tag will be added
      ## If multiple instances of the http header are present, only the first value will be used
      # http_header_tags = {"HTTP_HEADER" = "TAG_NAME"}
    
      ## Data format to consume.
      ## Each data format has its own unique set of configuration options, read
      ## more about them here:
      ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
      data_format = "influx"
